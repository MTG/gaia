
%pythoncode {
  _gaia2_docDict = {'metric': {'cosinesimilarity': None, 'exponentialcompress': '\n\nThis class compresses a distance from [0; inf) into [0; 1) using the\nfollowing formula: dist = 1 - exp(-alpha*dist), alpha being a\ncompression factor.\n\nParameters:\n-----------\n\ndistance:  the name of the distance to be compressed.\n\nparams:  the parameters for creating the distance to be compressed.\n\nalpha:  the compression factor.\n\nC++ includes: exponentialcompressdistance.h ', 'resistoraverage': '\n\nThis class computes the symmetric resistor-average distance of a given\nRegion.\n\nThis distance is based on the harmonic mean of the Kullback-Leibler\ndivergence. More details can be found in the "Symmetrizing the\nKullback-Leibler Distance" 2001 paper by Don H. Johnson and Sinan\nSinanovi\xc4\x87.\n\nNB: compared to the Kullback-Leibler distance, this one also needs the\ndeterminant of the covariance matrix to be precomputed.\n\nParameters:\n-----------\n\ndescriptorName:  the name of the descriptor for which you want to\ncompute the KL- distance. This descriptor needs to have 4 sub-\ndescriptors: mean, cov, icov and covdet. (representing, resp., the\nmean of the frames, the covariance matrix, the inverse of the\ncovariance matrix and the determinant of the covariance matrix).\n\nC++ includes: resistoraveragedistance.h ', 'linearcombination': '\n\nThis class computes a distance that is the linear combination of any\nnumber of other DistanceFunctions.\n\nFor instance, in a recommender system, a set of weights could be seen\nas a user profile, each user having its own preferences regarding\nwhich distance is more useful to him.\n\nParameters:\n-----------\n\nparameterMap:  the parameterMap passed as argument should contain\nmapping from a name to a map containing the following fields:\n"distance", "params" and "weight".\n\ndistance:  the name of the metric to create.\n\nparams:  the ParameterMap to be used when creating the specified\nmetric.\n\nweight:  the weight to be assigned to this metric in the linear\ncombination.\n\nC++ includes: linearcombinationdistance.h ', 'bpf': '\n\nThis class composes the breakpoint function specified by its pairs of\n(split point, value) with the given distance.\n\nParameters:\n-----------\n\ndistance:  the name of the distance to apply the BPF to.\n\nparams:  the parameters for creating the distance we compose with.\n\nbreakPoints:  the pairs (split point, value) that define the BPF.\n\nC++ includes: bpfdistance.h ', 'weightedeuclidean': '\n\nThis class computes the euclidean distance of a given Region, applying\na weight on each descriptor.\n\nWARNING: this metric is not final, and it might change its behavior in\nthe future.\n\nParameters:\n-----------\n\nweights:  a mapping from descriptor name to its weight.\n\nC++ includes: weightedeuclideandistance.h ', 'kullbackleibler': '\n\nThis class computes the symmetric Kullback-Leibler distance of a given\nRegion.\n\nParameters:\n-----------\n\ndescriptorName:  the name of the descriptor for which you want to\ncompute the KL- distance. This descriptor needs to have 3 sub-\ndescriptors: mean, cov, and icov. (representing, resp., the mean of\nthe frames, the covariance matrix, and the inverse of the covariance\nmatrix.\n\nC++ includes: kullbackleiblerdistance.h ', 'random': '\n\nThis class computes a distance which returns a random number between 0\nand the specified range.\n\nIt uses a uniform distribution.\n\nParameters:\n-----------\n\nrange:  the max value this distance can return (minimum being 0).\n\nC++ includes: randomdistance.h ', 'semanticclassifier': '\n\n: desc is wrong, still the wpearson one...\n\nThis class computes the semantic classifier distance between 2 points.\nIt is defined as $ d (X,Y) = \\\\\\\\sum{w_i\\\\\\\\frac{e^{(x_i-\ny_i)^{\\\\\\\\alpha}}}{\\\\\\\\beta+e^{x_i+y_i}}} $\n\nthe alpha coefficient in the above formula  the beta coefficient in\nthe above formula\n\nParameters:\n-----------\n\nweights:  a mapping from descriptor name to its weight.\n\nC++ includes: semanticclassifierdistance.h ', 'forceidentity': '\n\nThis metric forces the identity condition to be valid on the composed\ndistance by checking first if the 2 points are equal and returning 0\nif that is the case.\n\nOtherwise, it just returns the value of the composed distance.\n\nNB: Equality is decided using the name of the points, not their\ncontents.\n\nParameters:\n-----------\n\ndistance:  the name of the distance to be compressed.\n\nparams:  the parameters for creating the distance to be compressed\n\nC++ includes: forceidentitydistance.h ', 'euclidean': '\n\nThis class computes the euclidean distance of a given Region.\n\nParameters:\n-----------\n\ndescriptorNames:  the names of the descriptors to be included in the\ncomputation of the distance. Only accepts real descriptors, can use\nwildcards.\n\nexcept:  the names of the descriptors to be removed from the selected\nlist specified before. Can use wildcards.\n\nC++ includes: euclideandistance.h ', 'rhythm': '\n\nThis class computes the rhythm distance of a given descriptor.\n\nIt is defined as $d_{BPM}(X,Y) =\n\\\\\\\\min_{i=1,2,4,6,...}{\\\\\\\\alpha_{BPM}^{i-1}|\\\\\\\\frac{X_{BPM}}{Y_{BPM}}\n- i|}, X_{BPM} > Y_{BPM}$ .\n\nParameters:\n-----------\n\ndescriptorName:  the names of the descriptor to be used for the\ncomputation of the distance. Only accepts real descriptors.\n\nalpha:  the alpha coefficient (from the formula)\n\nindexRange:  the list of indices  upon which to iterate.\n\nC++ includes: rhythmdistance.h ', 'summedsegment': '\n\nThis class calculates a distance between segments from two points and\nsums the results.\n\nThe cross param defines whether only segments at the same position\nshould be compared, or each with each. The function used to calculate\nthe distance between two segments is given by the distance param.\n\nWARNING: this metric is not final, and it might change its behavior in\nthe future.\n\nParameters:\n-----------\n\ndistance:  the name of the distance to be compressed.\n\nparams:  the ParameterMap to be used when creating the specified\ndistance.\n\ncross:  compare segments at the same position or each with each\n\nC++ includes: summedsegmentdistance.h ', 'key': '\n\nThis class computes the harmonic distance between keys.\n\nRange is from 0 to 1. This distance has been written by Nico and is\nmore likely to serve as an example than a useful distance, but\nstill...\n\nParameters:\n-----------\n\nname:  the name of the descriptor containing the key value. Default is\n"key_key".\n\nC++ includes: keydistance.h ', 'minkowski': "\n\nThis class computes the Minkowski distance of a Region.\n\nIt is defined as: $ \\\\\\\\left( \\\\\\\\sum_{i} (a_i - b_i)^x \\\\\\\\right) ^\n{1/x}$ , for a given x.\n\nParameters:\n-----------\n\nexponent:  the exponent for this distance (the 'x' in the formula) NB:\nThis class is not implemented at the moment.\n\nC++ includes: minkowskidistance.h ", 'cosineangle': "\n\nThis class computes the angle in radians between 2 points and divides\nit by Pi (so that it's normalized between 0 and 1).\n\nParameters:\n-----------\n\ndescriptorNames:  the names of the descriptors to be included in the\ncomputation of the distance. Only accepts real descriptors, can use\nwildcards.\n\nexcept:  the names of the descriptors to be removed from the selected\nlist specified before. Can use wildcards.\n\ndefaultValue:  when 1 of the 2 points is null, then the angle is not\ndefined. If defaultValue is given, then it will be returned, otherwise\nan exception will be thrown.\n\nC++ includes: cosineangledistance.h ", 'weightedpearson': '\n\nThis class computes the weighted Pearson correlation between 2 points.\n\nIt is defined as $ d (X,Y) =\n1-\\\\\\\\frac{\\\\\\\\sum{w_i(x_i-\\\\\\\\bar{x_w})(y_i-\\\\\\\\bar{y_w})}}{\\\\\\\\sqrt{\\\\\\\\sum{w_i(x_i-\\\\\\\\bar{x_w})^2}}\\\\\\\\sqrt{\\\\\\\\sum{w_i(y_i-\\\\\\\\bar{y_w})^2}}}\n$ with weighted means $ \\\\\\\\bar{x_w} =\n\\\\\\\\frac{\\\\\\\\sum{w_ix_i}}{\\\\\\\\sum{w_i}}; \\\\\\\\bar{y_w} =\n\\\\\\\\frac{\\\\\\\\sum{w_iy_i}}{\\\\\\\\sum{w_i}} $ .\n\nParameters:\n-----------\n\nweights:  a mapping from descriptor name to its weight.\n\nC++ includes: weightedpearsondistance.h ', 'null': '\n\nThis class computes a distance which is always equal to 0.\n\nC++ includes: nulldistance.h ', 'manhattan': '\n\nThis class computes the Manhattan distance of a given Region.\n\nParameters:\n-----------\n\ndescriptorNames:  the names of the descriptors to be included in the\ncomputation of the distance. Only accepts real descriptors, can use\nwildcards.\n\nexcept:  the names of the descriptors to be removed from the selected\nlist specified before. Can use wildcards.\n\nC++ includes: manhattandistance.h ', 'crosssegment': '\n\nThis class calculates a distance between segments from two points.\n\nThe function used to calculate the distance between two segments is\ngiven by the distance parameter. What it does is the following: for a\ngiven segment of p1, it computes its distance with all the segments of\np2, then uses func1 to aggregate the results.\n\nit does the previous for all segments of p1, then uses func2 to\naggregate the results.\n\nWARNING: this metric is not final, and it might change its behavior in\nthe future.\n\nParameters:\n-----------\n\ndistance:  the name of the distance to be composed with.\n\nparams:  the parameters for creating the distance.\n\nfunc1:  the first aggregation function (min, max or mean).\n\nfunc2:  the second aggregation function (min, max or mean).\n\nC++ includes: crosssegmentdistance.h '}, 'analyzer': {'normalize': '\n\nThe Normalize analyzer normalizes real descriptors.\n\nThere are various ways of doing normalization, the most common being\nto just normalize the values so that they fall within the range [0;\n1].\n\nNB: This algorithm does not yet work with multi-segments points.\n\nParameters:\n-----------\n\ncollections:  the list of collections from which to gather the stats.\nthe transformation will still apply to all of them, though. (default:\n[], meaning all of them)\n\ndescriptorNames:  the names of the descriptors to be included in the\nnormalization. Only accepts real descriptors, can use wildcards.\n(default: "*").\n\nexcept:  the names of the descriptors to be removed from the selected\nlist specified before. Can use wildcards. (default: "").\n\ntype:  the type of normalization. Valid types are:  "range" which\nnormalizes using the minimum and maximum values.\n\n"variance" which normalizes using the variance of the values.\n(default: "range").\n\nindependent:  indicates whether to normalize each dimension from a\nsingle descriptor independently, or if the vector should be normalized\nas a whole (default: false).\n\noutliers:  the ratio (between 0 and 1) of outliers when computing the\nstatistics used for normalization. Outliers are the values which are\nnot taken into account because they have too extreme values. A value\nof -1 means do not use outliers (default: -1).\n\napplyClipping:  whether to apply clipping, eg: fitting the values into\nthe [0;1] range (default: false).\n\nC++ includes: normalize.h ', 'cleaner': '\n\nThe Cleaner analyzer checks for values that may cause problems when\ndoing mathematical analysis (such as normalize, pca, ...), and removes\nthem.\n\nThis analyzer checks for Real descriptors which have either Infinite\nor NaN values, and the ones that are constant (< 1e-7, actually, hence\nthey can not be normalized, and do not add any information anyway),\nand returns a transformation that removes them.\n\nParameters:\n-----------\n\ndescriptorNames:  the names of the descriptors to be included in the\nchecking. Only accepts real descriptors, can use wildcards. (default:\n"*").\n\nexcept:  the names of the descriptors to be removed from the selected\nlist specified before. Can use wildcards. (default: "").\n\nC++ includes: cleaner.h ', 'pca': '\n\nThe PCA Analyzer computes thePrincipal Components Analysis of the\ngiven DataSet using the specified descriptors.\n\nNB: the dimension and coveredVariance parameters are exclusive, so you\nmust specify only one of the two.\n\nParameters:\n-----------\n\ndescriptorNames:  the names of the descriptors to be included in the\nPCA analysis. Only accepts real descriptors, can use wildcards.\n(default: "*").\n\nexcept:  the names of the descriptors to be removed from the selected\nlist specified before. Can use wildcards. (default: "").\n\nresultName:  the name of the resulting descriptor. (default: some name\nconstructed from \'pca\', the number of dimensions, and the original\ndescriptor names)\n\ndimension:  the target (final) dimension.\n\ncoveredVariance:  the percentage of the total variance to be covered\nby the PCA. The target dimension will then be chosen as the smallest\none that accounts for at least that much variance.\n\nC++ includes: pca.h ', 'center': '\n\nThe Center analyzer centers the points around the mean of each\ndescriptor.\n\n(it substracts the mean of a each dimension to all instances).\n\nParameters:\n-----------\n\ndescriptorNames:  the names of the descriptors to be included in the\nnormalization. Only accepts real descriptors, can use wildcards.\n(default: "*").\n\nexcept:  the names of the descriptors to be removed from the selected\nlist specified before. Can use wildcards. (default: "").\n\nC++ includes: center.h ', 'addfield': '\n\nThe AddField analyzer allows you to add new fields in a layout of an\nalready existing DataSet.\n\nBy default, the real fields will have a value of 0 and the string\nfields will have a value of "".\n\nParameters:\n-----------\n\nreal:  the names of the fields of type real to be added.\n\nstring:  the names of the fields of type string to be added.\n\ndefault:  a map containing the (optional) default values for the new\nfields to be added.\n\nsize:  a map containing the (optional) default size for the new fields\nto be added. If a field is specified here, it will be added as a\nfixed- length field in the layout, otherwise it will be a variable-\nlength field.\n\nC++ includes: addfield.h ', 'remove': '\n\nThe Remove analyzer allows you to discard specific descriptors.\n\nParameters:\n-----------\n\ndescriptorNames:  the names of the descriptors to be discarded. Can\nuse wildcards.\n\nexcept:  the names of the descriptors to be removed from the selected\nlist specified before. Can use wildcards. (default: "").\n\nfailOnUnmatched:  whether to fail if one of the given patterns didn\'t\nmatch any descriptor in the layout.\n\nC++ includes: remove.h ', 'rename': '\n\nThe Rename analyzer allows you to rename an existing field.\n\nParameters:\n-----------\n\ndescriptorName:  the name of the field you want to rename.\n\nnewName:  the new names to give to the field.\n\nC++ includes: rename.h ', 'removevl': '\n\nThe RemoveVL analyzer checks for descriptors which are variable-length\ndescriptors, such as the list of beats, ticks, chords, etc. and\nremoves them.\n\nC++ includes: removevl.h ', 'gaussianize': "\n\nThe Gaussianize analyzer fits each descriptor into a gaussian\ndistribution.\n\nIt does it by sorting all the values, and giving them new values as if\nthey were forming a perfect gaussian distribution. In doing so it\ncompletely discards the value it had before (only keeps the rank), and\nas such may be not as correct or precise as a BoxCox transformation,\nbut it is much faster to compute.\n\nNB: This algorithm does not yet work with multi-segments points.\n\nParameters:\n-----------\n\ndistributionSize:  when analyzing the distribution of a lot of values,\nit is not necessary to keep all points as reference, but only a subset\nof them. This value represent the maximum number of reference values\nused to model the distribution. In most cases, 10'000 points should\ngive a precise enough distribution while still being efficient to\ncompute. (default: 10000).\n\nC++ includes: gaussianize.h ", 'enumerate': '\n\nThe Enumerate analyzer allows you to specify a list of string\ndescriptors which you want to be stored as enumerations.\n\nTypically, for string descriptors that only take a subset of values\n(eg: key and mode), this will reduce the memory used for storage and\nit will also be much faster when filtering.\n\nParameters:\n-----------\n\ndescriptorNames:  the names of the descriptors to be enumerated. Can\nuse wildcards.\n\nexcept:  the names of the descriptors to be removed from the selected\nlist specified before. Can use wildcards. (default: "").\n\nC++ includes: enumerate.h ', 'fixlength': '\n\nThe FixLength analyzer allows you to specify a list of descriptors for\nwhich you want to fix the length definitely.\n\nThis is very useful for saving memory.\n\nParameters:\n-----------\n\ndescriptorNames:  the names of the descriptors to be fixed. Can use\nwildcards. If you don\'t specify a value here, it will fix the length\nof all the descriptors which are of fixed size inside this dataset. In\nthat case, the exclude parameter will be ignored.\n\nexcept:  the names of the descriptors to be removed from the selected\nlist specified before. Can use wildcards. (default: "").\n\nC++ includes: fixlength.h ', 'inverseprojection': '\n\nThe inverse projection Analyzer computes the inverse the previous\ntransformation, given it was a linear projection (such as PCA or RCA).\n\nActually, as not all projections are invertible, in effect it does a\nprojection using the transposed matrix of the previous one.\n\nIn the case of PCA and RCA, it does correspond to the inverse\nprojection, because the projection matrix is the unitary basis for the\ncovariance matrix, which is positive-(semi)definite.\n\nThe resulting layout will be the same as if you had used the\nMergeRegion transformation on the dataset before calling the\nprojection transformation.\n\nNB: this transformation requires that the last transformation applied\nto the dataset is a projection.\n\nC++ includes: inverseprojection.h ', 'mergeregion': '\n\nThe MergeRegion analyzer allows you to merge multiple descriptors into\na single one.\n\nYou lose the ability to discern between them, but you gain a lot of\nmemory space by doing that.\n\nParameters:\n-----------\n\ndescriptorNames:  the names of the descriptors to be merged. Can use\nwildcards.\n\nexcept:  the names of the descriptors to be removed from the selected\nlist specified before. Can use wildcards. (default: "").\n\nresultName:  the name of the resulting descriptor (default:\n"merged").\n\nC++ includes: mergeregion.h ', 'extract': '\n\nThe Extract analyzer allows you to extract only specific dimensions\nfrom any given number of descriptors.\n\nIt works by specifying the list of dimensions to be extracted as\nstandalone descriptors in the form descriptorName[dim]. NB: at the\nmoment, this transformation only works on Real descriptors.\n\nParameters:\n-----------\n\ndimensions:  the names of the descriptors/dimensions to be extracted.\n\nC++ includes: extract.h ', 'rca': '\n\nThe RCA Analyzer computes theRelevant Components Analysis of the given\nDataSet using the specified descriptors.\n\nNote: the use of classFile, classMap and className is exclusive, ie:\nyou need to specify one and only one of them.\n\nParameters:\n-----------\n\ndescriptorNames:  the names of the descriptors to be included in the\nRCA analysis. Only accepts real descriptors, can use wildcards.\n(default: "*").\n\nexcept:  the names of the descriptors to be removed from the selected\nlist specified before. Can use wildcards. (default: "").\n\nresultName:  the name of the resulting descriptor. (default: some name\nconstructed from \'rca\', the number of dimensions, and the original\ndescriptor names)\n\ndimension:  the target (final) dimension.\n\nclassFile:  the name of the file containing the list of classes\n(chunklets in RCA language).\n\nclassMap:  the groundtruth map, from point IDs to their class value.\n\nclassName:  the name of the descriptor in the PointLayout that will be\nused as class label.\n\nC++ includes: rca.h ', 'svmtrain': '\n\nThe SVMTrain analyzer creates a SVM model for the given dataset using\nlibsvm.\n\nChih-Chung Chang and Chih-Jen Lin, LIBSVM : a library for support\nvector machines, 2001. Software available\nathttp://www.csie.ntu.edu.tw/~cjlin/libsvm.\n\nParameters:\n-----------\n\nclassName:  the name of the descriptor which is to be used as the\nclass\n\ntype:  the SVM type. Available types are: C-SVC\n\nnu-SVC\n\none-class\n\nepsilon-SVR\n\nnu-SVR  (default: C-SVC)\n\nkernel:  the kernel type. Available types are: linear\n\npolynomial (poly)\n\nradial (basis function) (also called RBF)\n\nsigmoid  (default: RBF)\n\nprobability:  whether to train the model for probability estimates\n(default: false)\n\ndegree:  the degree in the kernel function (default 3)\n\nc:  the cost parameter C used in C-SVC, epsilon-SVR, and nu-SVR\n(default 1)\n\nnu:  the nu parameter of nu-SVC, one-class SVM, and nu-SVR (default\n0.5)\n\ngamma:  the gamma coeff in the kernel function (default 1/dim)\n\nC++ includes: svmtrain.h ', 'select': '\n\nThe Select analyzer allows you to keep only specific descriptors.\n\nParameters:\n-----------\n\ndescriptorNames:  the names of the descriptors to be kept. Can use\nwildcards.\n\nexcept:  the names of the descriptors to be removed from the selected\nlist specified before. Can use wildcards. (default: "").\n\nC++ includes: select.h '}}
}
