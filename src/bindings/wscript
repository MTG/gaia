#!/usr/bin/env python
# encoding: utf-8

# <copyright entity="UPF">
# UPF. All Right Reserved, http://www.upf.edu/
#
# This source is subject to the Contributor License Agreement of the Essentia project.
# Please see the CLA.txt file available at http://essentia.upf.edu/contribute/
# for more
# information.
# 
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY 
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
# PARTICULAR PURPOSE.
#
# </copyright>
from __future__ import print_function
import sys

gaia_qt5 = False

def print_env(env):
    for n in env.m_table.keys():
        if 'py' in n or 'PY' in n:
            print (n, ':', env[n])


def options(opt):
    opt.add_option('--with-python-bindings', action='store_true',
                   dest = 'with_python_bindings', default = False,
                   help = 'whether or not to compile the python bindings')


def configure(conf):
    global gaia_qt5
    gaia_qt5 = conf.env['WITH_GAIA_QT5']
    conf.env['WITH_PYTHON_BINDINGS'] = conf.options.with_python_bindings
    if conf.env['WITH_PYTHON_BINDINGS']:
        if gaia_qt5:
            conf.load('swig python qt5')
            #conf.load('swig')
            #conf.load('python')
        else:
            conf.load('swig python qt4')
            #conf.load('swig')
            #conf.load('python')

        #print (conf.env.SWIG)
        #if type(conf.env.SWIG) == str:
        #    conf.env.SWIG = [ conf.env.SWIG ]
        if conf.check_swig_version() < (1,8,16):
            conf.fatal('this swig version is too old')

        conf.check_python_version((2,4))
        conf.check_python_headers()

        #conf.find_program('touch', var='TOUCH')
        
        # do not use the default extension of .bundle on MacOS
        # TODO: still necessary with waf 1.5.x?
        if sys.platform == 'darwin':
            conf.env['pyext_SUFFIX'] = '.so'

        if sys.platform.startswith('linux') and conf.env['WITH_GAIA_QT5']:
            conf.env['CPPPATH_BINDINGS'] = [ '../../src',
                '../../src/bindings',
                '../../src/metrics',
                '../../src/3rdparty'] 
            #conf.env.uselib = 'QT5CORE QT5CONCURRENT YAML'
            conf.env['CXXFLAGS_BINDINGS'] = [ '-DGAIA_QT5','-msse2','-Wno-parentheses', '-Wno-uninitialized' ] 
        else:
            conf.env['CPPPATH_BINDINGS'] = [ '../../src',
                '../../src/bindings',
                '../../src/metrics',
                '../../src/3rdparty'] 
            #conf.env.uselib = 'QTCORE QTCONCURRENT YAML'
            conf.env['CXXFLAGS_BINDINGS'] = [ '-Wno-parentheses', '-Wno-uninitialized' ]  

def build_swig_qt5(bld):
    bld(features = 'cxx cshlib pyext',
        source = 'gaia.swig',
        target = '_gaia2',
        # -w 451: ignore the warning "Setting a const char * variable may leak memory"
        swig_flags = '-c++ -python -w451',
        use = ['gaia2'] + bld.env['USELIB'], # + ['BINDINGS'],
        uselib = 'QT5CORE QT5CONCURRENT YAML',
        #defines = bld.env['SWIG_DEFINES'], 
        includes = bld.env['CPPPATH_BINDINGS'],
        install_path = '${PYTHONDIR}'
    )
def build_swig_qt4(bld):
    bld(features = 'cxx cxxshlib pyext',
        source = 'gaia.swig',
        target = '_gaia2',
        swig_flags = '-c++ -python -w451',
        use = ['gaia2'] + bld.env['USELIB'], # + ['BINDINGS'],
        uselib = 'QTCORE YAML',
        #defines = bld.env['SWIG_DEFINES'], 
        includes = bld.env['CPPPATH_BINDINGS'],
        install_path = '${PYTHONDIR}'
    )

from waflib import Utils, Build
def build(bld):
    global gaia_qt5
    gaia_qt5 = bld.env['WITH_GAIA_QT5']
    #print(bld.env.TOUCH)
    #bld(rule='${TOUCH} ${TGT}', target='gaia.swig')
        
    if gaia_qt5:
        build_swig_qt5(bld)
    else:
        build_swig_qt4(bld)


    bld.install_as('${PYTHONDIR}/gaia2/__init__.py', 'gaia2.py')
    bld.install_files('${PYTHONDIR}/gaia2', bld.path.ant_glob('pygaia/*.py'))

    subfolders = [ 'classification', 'linalg', 'mtgdb',
                   'scripts', 'scripts/classification', 'scripts/collections' ]

    for folder in subfolders:
        bld.install_files('${PYTHONDIR}/gaia2/%s' % folder, bld.path.ant_glob('pygaia/%s/*.py' % folder))
        bld.install_files('${PYTHONDIR}/gaia2/%s' % folder, bld.path.ant_glob('pygaia/%s/*.yaml' % folder))

    if bld.env['WITH_CYCLOPS']:
        bld.install_as('${PYTHONDIR}/gaia2/cyclops/__init__.py', '../tools/cyclops_client/cyclops.py')
