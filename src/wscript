#!/usr/bin/env python
# encoding: utf-8
from __future__ import print_function
import sys
import os, os.path
gaia_qt5 = False

def options(opt):
    opt.add_option('--with-stlfacade', action='store_true',
                   dest = 'with_stlfacade', default = False,
                   help = 'whether or not to compile the STL facade inside the Gaia library')

    opt.add_option('--with-tests', action='store_true',
                   dest = 'with_tests', default = False,
                   help = 'whether ot not to compile the C++ tests inside the test directory')

    opt.recurse('bindings')


def configure(conf):
    global gaia_qt5
    gaia_qt5 = conf.env['GAIA_QT5']
    conf.env['WITH_STLFACADE'] = conf.options.with_stlfacade
    conf.env['WITH_TESTS'] = conf.options.with_tests
    conf.recurse('bindings')
    if sys.platform.startswith('linux') and gaia_qt5:
        conf.env['pyext_PATTERN'] = "%s.so"
        conf.env['PYTHONDIR'] = "python"+conf.env['PYTHON_VERSION']+"/dist-packages"

def install_tree(bld, dst, src):
    src = os.path.normpath(src)

    for root, dirs, files in os.walk(src):
        relroot = root[len(src)+1:]

        for f in files:
            bld.install_files(os.path.join(dst, relroot),
                              os.path.join(root, f))

def build_library(bld):
    sources =  bld.path.ant_glob('*.cpp')   
    sources += bld.path.ant_glob('algorithms/*.cpp')
    sources += bld.path.ant_glob('metrics/*.cpp')
    sources += bld.path.ant_glob('3rdparty/alglib/*.cpp')
    sources += bld.path.ant_glob('3rdparty/libsvm/*.cpp')
    sources += bld.path.ant_glob('parser/*.cpp')

    if bld.env['WITH_STLFACADE']:
        sources += bld.path.ant_glob('stlfacade/*.cpp')

    gaialib = bld.stlib(
        source   = sources,
        target   = 'gaia2',
        use      = bld.env['USELIB'],
        install_path = '${PREFIX}/lib',
        includes = [ '.', 'metrics', '3rdparty' ]
    )
    
    def write_pcfile(task):
        open('../build/gaia2.pc', 'w').write(bld.env.pcfile)

    bld(rule=write_pcfile,  name='write_pcfile', target='../gaia2.pc')
    bld.add_group()

    if bld.env['WITH_STLFACADE']: 
        bld.install_files('${PREFIX}/include/gaia2', bld.path.ant_glob('stlfacade/*.h'))
        bld.install_files('${PREFIX}/include/gaia2', 'baseexception.h')
    else:
        # we shouldn't redistribute these headers (they contain Qt code)
        bld.install_files('${PREFIX}/include/gaia2', bld.path.ant_glob('*.h'))
        bld.install_files('${PREFIX}/include/gaia2', [ 'algorithms/analyzer.h',
                                                       'algorithms/applier.h' ])
        bld.install_files('${PREFIX}/include/gaia2', [ 'metrics/distancefunction.h',
                                                       'metrics/layoutawarefactory.h',
                                                       'metrics/frozendistance.h' ])
        bld.install_files('${PREFIX}/include/gaia2/parser', [ 'parser/filter.h',
                                                              'parser/parsertypes.h',
                                                              'parser/grammar.h' ])
    
        # also install all Eigen headers
        import os
        os.chdir('src')
        install_tree(bld, '${PREFIX}/include/gaia2/Eigen', '3rdparty/Eigen')

    bld.install_files('${PREFIX}/lib/pkgconfig', '../build/gaia2.pc')
    bld.install_files('${PREFIX}/lib', 'libgaia2.a')


def is_dev_version(bld):
    return '-dev' in bld.env.APP_VERSION


def build_tools(bld):
    # merge utility
    bld.program(
        source = 'tools/gaiamerge.cpp',
        target = 'tools/gaiamerge',
        includes = [ '.', 'metrics', '3rdparty' ],
        use = ['gaia2'] + bld.env['USELIB'])

    # info utility
    bld.program(
        source = 'tools/gaiainfo.cpp',
        target = 'tools/gaiainfo',
        includes = [ '.', 'metrics', '3rdparty' ],
        use = ['gaia2'] + bld.env['USELIB'])
    
    # GaiaFusion
    bld.install_as('${PREFIX}/bin/gaiafusion', 'tools/gaiafusion.py', chmod='0755')

    # gaiafreeze utility
    bld.program(
        source = 'tools/gaiafreeze.cpp',
        target = 'tools/gaiafreeze',
        includes = [ '.', 'metrics', '3rdparty' ],
        use = ['gaia2'] + bld.env['USELIB'])
        
    if is_dev_version(bld):
        # Note: we don't want to build this with a released version, because
        # otherwise rpm insists on including it also in the distributed binary
        # gaiabench utility
        bld.program(
            source = 'tools/gaiabench.cpp tools/frozensearch.cpp',
            target = 'tools/gaiabench',
            includes = [ '.', 'metrics', '3rdparty' ],
            use = ['gaia2'] + bld.env['USELIB'])

    # Cyclops server
    if sys.platform.startswith('linux') and gaia_qt5:
        if bld.env['WITH_CYCLOPS']:
            # cyclops "normal" server
            bld(
                features = 'qt5 qt5network cxx cxxprogram cyclops',
                source = '''
                tools/cyclops_server/cyclopsserver.cpp
                tools/cyclops_server/cyclopsproxy.cpp
                tools/cyclops_server/cyclops.cpp
                tools/cyclops_server/yamlrpcserver.cpp
                ''',
                target = 'tools/cyclops',
                includes = [ '.', 'metrics', '3rdparty' ],
                use = ['gaia2'] + bld.env['USELIB'])

        # cyclops "master" server
            bld(
                features = 'qt5 qt5network cxx cxxprogram cyclops',
                source = '''
                tools/cyclops_server/cyclopsmasterserver.cpp
                tools/cyclops_server/cyclopsproxy.cpp
                tools/cyclops_server/cyclopsmaster.cpp
                tools/cyclops_server/cyclops.cpp
                tools/cyclops_server/yamlrpcserver.cpp
                ''',
                target = 'tools/cyclopsmaster',
                includes = [ '.', 'metrics', '3rdparty', 'tools/cyclops_server/' ],
                use = ['gaia2'] + bld.env['USELIB'])
        # cyclops init scripts
        bld.install_files('/etc/cyclops/', 'tools/cyclops_server/master.yaml')
        bld.install_files('/etc/init.d', bld.path.ant_glob('tools/cyclops_server/initscripts/*'), chmod='0755')
        
    else:
        if bld.env['WITH_CYCLOPS']:
            # cyclops "normal" server
            bld(
                features = 'qt4 cxx cxxprogram cyclops',
                source = '''
                tools/cyclops_server/cyclopsserver.cpp
                tools/cyclops_server/cyclopsproxy.cpp
                tools/cyclops_server/cyclops.cpp
                tools/cyclops_server/yamlrpcserver.cpp
                ''',
                target = 'tools/cyclops',
                includes = [ '.', 'metrics', '3rdparty' ],
                use = ['gaia2'] + bld.env['USELIB'])

        # cyclops "master" server
            bld(
                features = 'qt4 cxx cxxprogram cyclops',
                source = '''
                tools/cyclops_server/cyclopsmasterserver.cpp
                tools/cyclops_server/cyclopsproxy.cpp
                tools/cyclops_server/cyclopsmaster.cpp
                tools/cyclops_server/cyclops.cpp
                tools/cyclops_server/yamlrpcserver.cpp
                ''',
                target = 'tools/cyclopsmaster',
                includes = [ '.', 'metrics', '3rdparty', 'tools/cyclops_server/' ],
                use = ['gaia2'] + bld.env['USELIB'])
        # cyclops init scripts
    if bld.env['WITH_CYCLOPS']:
        # cyclops "normal" server
        bld(
            features = 'qt4 cxx cxxprogram cyclops',
            source = '''
            tools/cyclops_server/cyclopsserver.cpp
            tools/cyclops_server/cyclopsproxy.cpp
            tools/cyclops_server/cyclops.cpp
            tools/cyclops_server/yamlrpcserver.cpp
            ''',
            target = 'tools/cyclops',
            includes = [ '.', 'metrics', '3rdparty' ],
            use = ['gaia2'] + bld.env['USELIB'])

        # cyclops "master" server
        bld(
            features = 'qt4 cxx cxxprogram cyclops',
            source = '''
            tools/cyclops_server/cyclopsmasterserver.cpp
            tools/cyclops_server/cyclopsproxy.cpp
            tools/cyclops_server/cyclopsmaster.cpp
            tools/cyclops_server/cyclops.cpp
            tools/cyclops_server/yamlrpcserver.cpp
            ''',
            target = 'tools/cyclopsmaster',
            includes = [ '.', 'metrics', '3rdparty', 'tools/cyclops_server/' ],
            use = ['gaia2'] + bld.env['USELIB'])

        # cyclops init scripts
        bld.install_files('/etc/cyclops/', 'tools/cyclops_server/master.yaml')
        bld.install_files('/etc/init.d', bld.path.ant_glob('tools/cyclops_server/initscripts/*'), chmod='0755')
    
def build(bld):
    build_library(bld)
    build_tools(bld)

    if bld.env['WITH_TESTS']:
        bld.recurse('test')

    if bld.env['WITH_PYTHON_BINDINGS']:
        bld.recurse('bindings')

# use the following to add the include paths for generated *.moc files automatically
from waflib.TaskGen import feature, before, after
@feature('cyclops')
@after('process_source')
@before('apply_incpaths')
def add_includes_paths(self):
    incs = set(self.to_list(getattr(self, 'includes', '')))
    for x in self.compiled_tasks:
        incs.add(x.inputs[0].parent.path_from(self.path))
    self.includes = list(incs)
