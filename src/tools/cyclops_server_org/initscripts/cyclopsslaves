#!/usr/bin/env python
#
# Copyright (C) 2010 MTG, Universitat Pompeu Fabra
#

### BEGIN INIT INFO
# Provides:          cyclopsmaster
# Required-Start:    $remote_fs
# Required-Stop:     $remote_fs
# Should-Start:
# Should-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: RPC query server for Gaia queries
# Description:       This is the master component when setting up Gaia Cyclops in
#                    a master/slave setup. You should have the slaves running prior
#                    to launching the master node.
### END INIT INFO

import sys, yaml, subprocess, pwd, os

#PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

DAEMON='/usr/bin/cyclops'
#DAEMON='/usr/local/bin/cyclops'
CONFIG_FILE='/etc/cyclops/master.yaml'
NAME='cyclopsslaves'
DESC='Gaia Cyclops slave nodes'
LOGDIR='/var/log/cyclops'
CRONOLOG='/usr/bin/cronolog /var/log/cyclops/%%Y/slave.%(port)s.%%m%%d.log'
PIDFILE='/var/run/cyclopsslaves.pid'
USER='cyclops'

def usage():
    print "Usage: /etc/init.d/%s {start|stop|restart|reload|force-reload|status}" % NAME

def read_config():
    # read config file and get list of slaves
    try:
        slaves = yaml.load(open(CONFIG_FILE).read())['slaves']
    except:
        print 'Could not read slave configuration from config file:', CONFIG_FILE
        sys.exit(1)

    return slaves

def start_daemon(port):
    p = subprocess.Popen([ DAEMON, '-p', str(port) ],
                         stdout = subprocess.PIPE,
                         stderr = subprocess.STDOUT)
    subprocess.Popen((CRONOLOG % dict(port=port)).split(),
                     stdin = p.stdout)
    return p.pid

def start_slaves():
    slaves = read_config()

    # start slaves one by one
    pids = []
    snum = 1
    for sc in slaves:
        if sc['host'] in [ 'localhost', '127.0.0.1' ]:
            print "Starting Cyclops slave %d on port %d" % (snum, sc['port'])
            #ret = subprocess.call([ 'start-stop-daemon', '--start', '--quiet',
            #                        '--pidfile', PIDFILE % snum,
            #                        '--make-pid-file', '--background',
            #                        '--exec', DAEMON,
            #                        '--',
            #                        '-p', str(sc['port']) ])
            #if ret == 1:
            #    print 'already started...'
            pids += [ start_daemon(sc['port']) ]

            snum += 1

    #f = open(PIDFILE, 'w')
    #for pid in pids:
    #    f.write(' %d' % pid)
    #f.close()
    #print 'PIDS:', pids

def stop_slaves():
    #pids = open(PIDFILE).read().strip().split()
    #for pid in pids:
    #    print 'killing PID:', pid
    #    subprocess.call([ '/bin/kill', pid ])

    subprocess.call([ '/usr/bin/killall', 'cyclops' ]) # better, right?

    '''
    slaves = read_config()

    # stop slaves one by one
    snum = 1
    for sc in slaves:
        if sc['host'] in [ 'localhost', '127.0.0.1' ]:
            print "Starting Cyclops slave %d on port %d" % (snum, sc['port'])
            ret = subprocess.call([ 'start-stop-daemon', '--stop', '--quiet',
                                    '--retry=TERM/30/KILL/5',
                                    '--pidfile', PIDFILE % snum,
                                    '--exec', DAEMON ])
            if ret == 1:
                print 'already stopped...'

            snum += 1
    '''


if __name__ == '__main__':
    if len(sys.argv) < 2:
        usage()
        sys.exit(1)

    # change the user id of the process
    uid = pwd.getpwnam(USER)[2]
    os.setuid(uid)
    os.seteuid(uid)

    cmd = sys.argv[1]
    if cmd == 'start':
        start_slaves()

    elif cmd == 'stop':
        stop_slaves()

    elif cmd == 'reload':
        print "Reloading %s daemon: not implemented, as the daemon" % NAME
        print "cannot re-read the config file (use restart)."

    elif cmd == 'restart' or cmd == 'force-reload':
        subprocess.call([ sys.argv[0], 'stop' ])
        subprocess.call([ sys.argv[0], 'start' ])

    elif cmd == 'status':
        print 'unknown status. (TODO: implement me)'

    else:
        usage()

